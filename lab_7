#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <stdlib.h>

#define MAXRESOURCES 5
#define MAXTHREADS 6
int available_resources = MAXRESOURCES;

pthread_mutex_t mtx;
int size = MAXTHREADS;
int count_threads[MAXTHREADS] = {2,-3,2,-2,1,-1};// - cand dam resurse, + cand eliberam resurse

int decrease_count(int count)
{
    if (pthread_mutex_lock(&mtx))//pthread mutex lock(3) nu se termin˘a de executat pˆan˘a nuobt, ine mutexul, blocˆand astfel firul de executie ce a apelat-o!
    {
        printf("Eroare la scaderea numarului de resurse\n");
    }

    
    if (count <= available_resources)// daca mai sunt resurse
    {
        available_resources -= count;
        printf("Got %d resources, %d remaining\n", count, available_resources);
    }
    return pthread_mutex_unlock(&mtx);
}

int increase_count(int count)
{
    if (pthread_mutex_lock(&mtx))
    {
        printf("Eroare la cresterea numarului de resurse\n");
    }

    
    if (available_resources + count <= MAXRESOURCES)// numarul de resurse nu trebuie sa depaseasca numarul maxim
    {
         available_resources += count;
         printf("Released %d resources, %d remaining\n", count, available_resources);
    }

    return pthread_mutex_unlock(&mtx);
}

void* threads_fun(void* x)
{
    
    int count = *((int*)x);

   
    if (count < 0)
        decrease_count(-count);
    else
        increase_count(count);

    return NULL;
}



int main()
{
	// initializam mutexul
    if (pthread_mutex_init(&mtx, NULL))
	{
        perror(NULL);
        return errno ;
    }

    
    printf("MAXRESOURCES = %d\n", MAXRESOURCES);

    
    pthread_t* v = malloc(size * sizeof(pthread_t *));// vector thr


    for (int i = 0; i < size; i++)
        pthread_create(&v[i], NULL, threads_fun, &count_threads[i]);

    for (int i = 0; i < size; i++)
        pthread_join(v[i], NULL);

	// distrugem mutexul
    pthread_mutex_destroy(&mtx);
    return 0;
}


//2
#include <pthread.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>

#define NR_THREADS 5


pthread_mutex_t mtx;
sem_t sem;// pt a aduna toate thr la bariera

int count;

int barrier_point()
{
    
	pthread_mutex_lock(&mtx);// zona critica, bariera, le blocheaza ca sa calculeze corect count ul
	count++;
	pthread_mutex_unlock(&mtx);

    
	if (count < NR_THREADS)// pana ajungem la toate thr
    {
		sem_wait(&sem);
	}

    
	if (count == NR_THREADS)// cand asteapta toate thr
    {
        // elibereaza thread-ul care asteapta
        // de cel mai mult timp in coada
		sem_post(&sem);
	}

	return 0;
}

void* tfun(void* v)
{
	int* tid = (int*)v;
	
	printf("%d reached the barrier\n", *tid);
	barrier_point();
	printf("%d passed the barrier\n", *tid);

    // eliberam memoria alocata dinamic
	free(tid);
	
    return;
}

// programul va fi compilat astfel: gcc lab7ex2.c -o lab7ex2 -pthread
// programul va fi apelat astfel: ./lab7ex2

int main()
{
	int i, s = 0;
	int* id;

    // declaram un vector de threaduri
	pthread_t thr[NR_THREADS];
	
    // initializam mutexul
    if(pthread_mutex_init(&mtx, NULL))
    {
		perror(NULL);
		return errno;
	}

    // initializam semaforul
	if(sem_init(&sem, 0, s))
    {
		perror(NULL);
		return errno;
	}

	for (i = 0; i < NR_THREADS; i++)
    {
        // fiecare thread va avea un id
        // pornind numaratoarea de la 0

		id = (int *)malloc(sizeof(int));
		*id = i;

        // daca exista eroare la crearea
        // threadului cu indexul i

		if (pthread_create(&thr[i], NULL, tfun, id))
        {
			perror(NULL);
			return errno;
		}
	}

	for (i = 0; i < NR_THREADS; i++)
    {
        // se asteapta terminarea executiei
        // tuturor threadurilor

		if (pthread_join(thr[i], NULL))
        {
			perror(NULL);
			return errno;
		}
	}

    // distrugem semaforul si mutexul
	sem_destroy(&sem);
	pthread_mutex_destroy(&mtx);

	return 0;
}
